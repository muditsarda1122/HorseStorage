// send calldata -> function dispatch -> function 

// 60008060093d393df3 -> contract creation bytecode
// xxxx???            -> runtime bytecode
// xxxx???            -> metadata bytecode

/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() // this is also how solidity assigns storage slots to variables too, the first declared variable will be assigned to the storage slot 0

// a good litmus test to check if the opcode that we are looking at is contract creation bytecode is to look for bytecode '39', which is the CODECOPY bytecode.
#define macro MAIN() = takes(0) returns(0) {
    // We need to get the function selector from the calldata(first 4 bytes) for function dispatching and for that we need to push the calldata to the stack
    // pushes 0 to the stack (PUSH0)
    0x00                   // [0]
    // this will remove 0 from the stack and will understand that after leaving 0 bytes from the calldata, push 32 bytes into the stack. if the calldata is 0x4567yt456, it will leave 0 bytes from '0x' and push next 32 bytes to the stack           
    calldataload           // [calldata]
    // with the calldata pushed in the stack, we now need to extract the first 4 bytes for which we will use SHR opcode. REMEMBER that the 'shift' is in bits and the calldata is in bytes. 
    // original calldata: 0xcdfead2e0000000000000000000000000000000000000000000000000000000000000001
    // calldata in stack: 0xcdfead2e0000000000000000000000000000000000000000000000000000000
    // we need 0xcdfead2e, so we need to remove remaining 28 bytes(which is 28*8 = 224 bits, which is 0xe0 in hex)
    0xE0                   // [0xe0]
                           // [calldata]
    shr                    // [f_selector(i.e. 0xcdfead2e)]

    // now that we have the selector, we need to figure out which function's selector does it matches to?
    // if f_selector == updateHorseNumber -> jump to that code
    // if f_selector == readHorseNumber -> jump to that code
    // 0xcdfead2e = updateHorseNumber
    // 0xe026c017 = readHorseNumber
    dup1                   // [f_selector, f_selector]
    __FUNC_SIG(updateHorseNumber)             // [0xcdfead2e]
                                              // [f_selector]
                                              // [f_selector]
    eq                     // [true_if_func_selector_matches]
                           // [f_selector]
    // jump to updateHorseNumber if true
    updateJump             // [updateHorseNumberProgramCounter]
                           // [true/false]
                           // [f_selector]
    // 'jumpi' takes program counter and a condition, need to put in program counter at the top
    jumpi                  // [f_selector]

    // the question to ask is if the f_selector does not match, then do we need to find the f_selector again and have an eq check again as the stack is empty? 
    // we can do it, but is gas expensive. Instead we should simply make a duplicate of the f_selector before hand itself.
    // IF WE WERE WRITING THIS IN SOLIDITY THIS LINE WOULD HAVE AN EXTRA 'dupi' OPCODE HERE WHICH WOULD COST EXTRA GAS
    __FUNC_SIG(readNumberOfHorses)             // [0xe026c017]
                           // [f_selector]
    eq                     // [true_if_func_selector_matches]
    readJump               // [readNumberOfHorsesProgramCounter]
                           // [true_if_func_selector_matches]
    jumpi                  // []

    // if we do not put any revert here in case the function selctor does not matches any valid function, the code might keep going and could potentially end up calling something that we don't want to
    // we can print some custon error message too. For that we need to store that message in the memory and provide here the offset at which it is available(first 0x00) and the length of the error message(or how many bytes we want to display)(last 0x00)
    0x00 0x00 revert



    // this sets the jump destination 
    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()

}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. get the value to store from calldata
    // we can get the value by offsetting the calldata by 4 bytes(as the first 4 bytes represent the function selector and the remainign has the value)
    0x04                                            // [4]
                                                    // [f_selector]
    calldataload                                    // [value] -> value is calldata minus first 4 bytes
                                                    // [f_selector]
    // 2. give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]                 // [0] -> this is a pointer to the next available free storage slot
                                                    // [value]
                                                    // [f_selector]
    // 3. sstore opcode
    sstore                                          // [f_selector]
    stop                                            // [f_selector]
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. get the storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]                 // [key]
    // 2. load the value in that slot to the memory
    sload                                           // [value]
    0x00                                            // [0]
                                                    // [value]
    mstore                                          // []   // memory: [value]
    // 0x20 = 32(in decimal) i.e. the uint256 is of 32 bytes
    0x20                                            // [20] // memory: [value]
    0x00                                            // [0]  // memory: [value]
                                                    // [20]                              
    // 3. return
    return                                          // []   // memory: [] 
}

